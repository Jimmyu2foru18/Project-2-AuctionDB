import json
import os
import mysql.connector
from decimal import Decimal
from datetime import datetime

class EBayDataImporter:
    def __init__(self):
        self.connection = mysql.connector.connect(
            host='localhost',
            user='root',  # Your MySQL Workbench username
            password='your_password',  # Your MySQL Workbench password
            database='auctionbase'  # Your database name
        )
        self.cursor = self.connection.cursor()

    def clean_price(self, price_str):
        # Handle potential empty or invalid price strings
        if not price_str or price_str.strip() == '':
            return Decimal('0.00')
        return Decimal(price_str.replace('$', '').replace(',', ''))

    def parse_datetime(self, date_str):
        try:
            return datetime.strptime(date_str, '%b-%d-%y %H:%M')
        except ValueError:
            print(f"Warning: Invalid date format - {date_str}")
            return datetime.now()

    def import_data(self, folder_path):
        # Disable foreign key checks to speed up import
        self.cursor.execute("SET FOREIGN_KEY_CHECKS = 0;")
        
        # Truncate existing tables to avoid duplicates
        tables_to_clear = [
            'Bids', 'ItemCategories', 'Items', 'Users', 'Categories'
        ]
        for table in tables_to_clear:
            self.cursor.execute(f"TRUNCATE TABLE {table};")

        # Process each JSON file in the folder
        total_items_processed = 0
        for filename in sorted(os.listdir(folder_path)):
            if filename.endswith('.json'):
                filepath = os.path.join(folder_path, filename)
                print(f"Processing {filename}...")
                
                with open(filepath, 'r', encoding='utf-8') as f:
                    try:
                        items = json.load(f)
                        
                        # Import users first
                        self.import_users(items)
                        
                        # Import categories
                        self.import_categories(items)
                        
                        # Import items
                        self.import_items(items)
                        
                        # Import bids
                        self.import_bids(items)
                        
                        # Commit after each file
                        self.connection.commit()
                        total_items_processed += len(items)
                        print(f"Successfully imported {filename}")
                    
                    except Exception as e:
                        print(f"Error importing {filename}: {e}")
                        self.connection.rollback()

        # Re-enable foreign key checks
        self.cursor.execute("SET FOREIGN_KEY_CHECKS = 1;")
        
        print(f"Total items processed: {total_items_processed}")
        self.connection.close()

    def import_users(self, items):
        users_query = """
        INSERT IGNORE INTO Users (UserID, Username, IsSeller, IsBuyer) 
        VALUES (%s, %s, %s, %s)
        """
        
        # Collect unique users
        unique_users = set()
        
        # Add sellers
        for item in items:
            seller = item['Seller']
            seller_id = str(seller['UserID'])
            if seller_id not in unique_users:
                unique_users.add(seller_id)
                self.cursor.execute(users_query, (
                    seller_id, 
                    seller_id, 
                    True,   # IsSeller
                    False   # IsBuyer
                ))
        
        # Add bidders
        for item in items:
            for bid in item.get('Bids', []):
                bidder = bid['Bidder']
                bidder_id = str(bidder['UserID'])
                if bidder_id not in unique_users:
                    unique_users.add(bidder_id)
                    self.cursor.execute(users_query, (
                        bidder_id, 
                        bidder_id, 
                        False,  # IsSeller
                        True    # IsBuyer
                    ))

    def import_categories(self, items):
        category_query = "INSERT IGNORE INTO Categories (CategoryID, CategoryName) VALUES (%s, %s)"
        
        # Collect unique categories
        unique_categories = set()
        
        for item in items:
            for category in item['Category']:
                if category not in unique_categories:
                    unique_categories.add(category)
                    # Use hash of category name as CategoryID
                    category_id = abs(hash(category)) % (10**8)
                    self.cursor.execute(category_query, (category_id, category))

    def import_items(self, items):
        item_query = """
        INSERT INTO Items 
        (ItemID, ItemName, SellerID, Location, Country, Description, 
        StartTime, EndTime, StartingPrice, CurrentPrice, NumberOfBids) 
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        
        item_category_query = """
        INSERT IGNORE INTO ItemCategories (ItemID, CategoryID) 
        VALUES (%s, %s)
        """

        for item in items:
            # Insert item
            self.cursor.execute(item_query, (
                int(item['ItemID']),
                item['Name'],
                str(item['Seller']['UserID']),
                item['Location'],
                item['Country'],
                item.get('Description', ''),
                self.parse_datetime(item['Started']),
                self.parse_datetime(item['Ends']),
                self.clean_price(item['First_Bid']),
                self.clean_price(item['Currently']),
                int(item['Number_of_Bids'])
            ))

            # Insert item categories
            for category in item['Category']:
                category_id = abs(hash(category)) % (10**8)
                self.cursor.execute(item_category_query, (
                    int(item['ItemID']), 
                    category_id
                ))

    def import_bids(self, items):
        bid_query = """
        INSERT INTO Bids 
        (BidID, ItemID, BidderID, BidAmount, BidTime) 
        VALUES (%s, %s, %s, %s, %s)
        """

        # Track bid ID to ensure unique
        bid_id_counter = 1

        for item in items:
            for bid in item.get('Bids', []):
                self.cursor.execute(bid_query, (
                    bid_id_counter,
                    int(item['ItemID']),
                    str(bid['Bidder']['UserID']),
                    self.clean_price(bid['Amount']),
                    self.parse_datetime(bid['Time'])
                ))
                bid_id_counter += 1

# Create importer and run
importer = EBayDataImporter()
importer.import_data('/full/path/to/ebay_data/folder')
